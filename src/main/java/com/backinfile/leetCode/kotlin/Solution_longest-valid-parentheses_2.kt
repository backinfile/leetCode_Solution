package com.backinfile.leetCode.kotlin

import org.junit.Test

class `Solution_longest-valid-parentheses_2` {

    fun longestValidParentheses(s: String): Int {
        val dp = IntArray(s.length) // 以n结尾的最长长度

        var maxLength = 0
        for (i in 1 until s.length) {
            if (s[i] == '(') {
                continue
            }

            val curLength = if (s[i - 1] == '(') {
                if (i >= 2) dp[i - 2] + 2 else 2
            } else if (i - dp[i - 1] - 1 >= 0 && s[i - dp[i - 1] - 1] == '(') {
                2 + dp[i - 1] + if (i - dp[i - 1] - 2 >= 0) dp[i - dp[i - 1] - 2] else 0
            } else {
                continue
            }

            dp[i] = curLength
            maxLength = maxLength.coerceAtLeast(curLength)

        }
//        println(maxLength)
        return maxLength
    }

    @Test
    fun test() {
//        assert(longestValidParentheses("(()") == 2)
        assert(longestValidParentheses(")()())") == 4)
        assert(longestValidParentheses(")()(()()))") == 8)
        assert(longestValidParentheses(")(()())())") == 8)
        assert(
            1144 == longestValidParentheses(

            )
        )
    }
}