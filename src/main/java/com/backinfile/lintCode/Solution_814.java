package com.backinfile.lintCode;

import org.junit.Test;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Solution_814 {
    /**
     * @param graph: a list of Undirected graph node
     * @param A:     nodeA
     * @param B:     nodeB
     * @return: the length of the shortest path
     */
    public int shortestPath(List<UndirectedGraphNode> graph, UndirectedGraphNode A, UndirectedGraphNode B) {
        if (A == B) {
            return 0;
        }

        LinkedList<Pair<UndirectedGraphNode, Integer>> queue = new LinkedList<>();
        queue.add(new Pair<>(A, 0));

        HashSet<Integer> foot = new HashSet<>();
        foot.add(A.label);

        while (!queue.isEmpty()) {
            Pair<UndirectedGraphNode, Integer> pair = queue.poll();
            UndirectedGraphNode node = pair.key;
            int curPath = pair.value;
            for (UndirectedGraphNode child : node.neighbors) {
                if (child == B) {
                    return curPath + 1;
                }
                if (foot.contains(child.label)) {
                    continue;
                }
                foot.add(child.label);
                queue.add(new Pair<>(child, curPath + 1));
            }
        }
        return 0;
    }

    private static class Pair<K, V> {
        public final K key;
        public final V value;

        private Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }

    @Test
    public void test() {
        assert test("{1,2,4#2,1,4#3,5#4,1,2#5,3}", 3, 5) == 1;
        assert test("{1,2,3,4#2,1,3#3,1#4,1,5#5,4}", 1, 5) == 2;
        assert test("{1,2,3,4#2,1,3#3,1#4,1,5#5,4,6#6,5}", 1, 6) == 3;
        assert test("{1,2,29,3,4,53,9,40,15,54,57,26,10,24,25,14,26,26,18,15,16,20#2,3,3,58,49,28,8,53,33,28,26,48,1,34,60,53,45,25,29,32,10#3,4,17,8,9,60,59,60,41,53,30,37,23,37,40,28,15,27,11,23,22,58,10,59#4,5,35,57,53,30,38,37,10,33,50,2,57,38,16,57,11,28,54,51,22,7,58,31,19,14,29,53,48,37#5,6,8,17,30,23,38,43,37,9,34,1#6,7,21,23,35,2,21,18,30,59,29,35,58,28,52,1,12,15,46,33,2,36,17,28#7,8,32,4,12,17,36,52,52,32,38,47,8,10,50,10,9#8,9,40,45,57,58,42,35,3,36,41,44,11,6,13,26,29,13,11,48,9,19,57,10#9,10,53,45,40,3,54,59,28,50,16,48,6,21,40,22#10,11,31,19,27,41,15,32,19,33,31,48#11,12,58,50,37,35,55,32,28,45,9,40#12,13,17,55,26,34,40,3,53,22,27,6,21,17,18,44,45,30,5,40,46#13,14,21,50,54,8,39,12,8,15,53,28,19,24,35,30,34,11,41,43,11,50,19,29,40,27,31,60,39#14,15,29,4,15,22,34,53,30,43,3,27,18,42,25,36,55,5,21#15,16,8,55,28,24,53,40,21,39,23,42,19,13,6,44,17,50#16,17,26,42,49,55,58,38,45,1,21,29,39,36,15,56,45,5#17,18,55,39,26,2,60,10,6,4,26,18,21,9,24,22,26,52#18,19,55,35,42,40,53,51,58,23,34,30,34,39,22,11,28,45#19,20,39,8,36,30,24,60,54,34,56,8,47,31,35,3,24,30,59#20,21,26,42,22,1,3,15,45,26,56,8,4,37,38,45,57,29,31,49,15#21,22,28,10,56,34,60,48,46,41,16,45,9,39,59,8,38,27,35,48,32,51,42#22,23,51,30,39,32,55,59,43,41,33,19,10,48,44,1,2,21,53,39#23,24,10,45,15,7,28,2,17,25,51,41,43,40,48,13,6,25,47,7,1,17,21,1,47,54,46,38,12,13,42,43#24,25,37,12,10,26,25,19,11,18,10,59,17,9,15,7,28#25,26,12,16,31,20,6,37,23,48,44,40,24,19,1,17,22,17,4,1,44,51,46#26,27,20,28,14,7,28,39,37,47,55,40,33,6,55,24,9,25,12,15,28,32,25,59#27,28,34,37,25,13,39,5,31,44,13,17,12,43,2,15,52,42,23,32,17#28,29,35,25,49,30,43,5,5,8,52,22,25,32,44,5,5,36,17,39,42,53#29,30,48,24,38,31,37,34,39,16,34,16,17,13,19,3,9,40#30,31,26,27,37,6,48,32,34,7,9,24,60,38,58,16#31,32,42,39,17,15,6,56,32,12,13,42,54,1,52#32,33,12,50,23,45,44,2,53,53,50,13,30,9,18,25,37,20,6,12,39,5,13,59#33,34,30,45,19,47,40,9,38,14,21,16,30,46,1,17,44,57,30,34,55#34,35,41,48,13,44,15,2,10,10,12,27,13,37,54,2,8,45,50,28,58,51,52#35,36,54,56,6,46,38,45,57,14,50,56,1,55,30,22,53,32,16,42,38,12#36,37,24,25,28,57,45,51,11,60,15,3,4,31,56,13,14,39,3,38,5,29#37,38,15,21,9,32,20,7,59,55,16,2,24,44,33,4,59,6,48#38,39,27,50,22,52,33,14,44,19,15,9,54,6,49,51,53,50,26#39,40,22,17,38,22,14,54,21,53,36,10,56,32,43,45,5,51,45,45,48,56,23,23#40,41,26,12,46,60,2,24,2,12,12,15,39,35,49,24,3,54,44#41,42,60,2,56,42,1,13,52,52,59,11,22,31,53,58,8,18,26,38,35,15,24,45,19,33#42,43,15,38,43,19,59,36,54,24,51,30,37,38,9,20,60,38,20,50,13#43,44,2,51,33,23,46,1,30,30,51,56,59,29,13,6,16,60#44,45,15,9,22,37,57,35,31,38,4,15,29,16,20,33,49#45,46,27,39,44,50,28,50,21,59,49,40,42,40,47,29,16,40,42,29,50,16,11#46,47,28,40,38,26,16,16,10,10,51,12,22,4,8,57,36,56,33,23,29,42,32#47,48,28,21,44,26,7,41,32,38,5,12,44,24,8,33,52,24,27,35#48,49,16,15,55,43,2,55,55,45,39,6,30,20,46,29,3,3,50#49,50,47,32,39,18,58,17,2,35,18,11,4,38,44,46,20#50,51,34,42,44,1,15,20,3,32,42,39,49,52,21,25,54,13,40,4,56,47#51,52,25,53,35,24,47,22,46,52,6,23,11,58,36,27,1,44,3,52,35,9,55,26,30#52,53,54,59,49,39,50,35,6,23,49,24,15,27,47#53,54,17,9,23,30,5,12,32,22,2,36,23,39,44,27,38,4,23,23,12,39,21,40,3,56,31#54,55,41,17,14,60,9,25,47,37,29,7,35,47,18,20,44,39,23,23,14,4#55,56,18,4,9,16,22,7,42,37,33,29,56,21,17,10,37,59,52,10,50,45,18,29#56,57,60,20,27,38,20,16,5,3,30,9,22,31,9,53,44,12,37,10,54,27,39#57,58,39,19,17,48,39,44,36,41,3,40,19,41,23,37,47,50,33,34,1#58,59,36,33,35,35,6,8,33,49,34,40,30,35,48,53,3,28#59,60,45,27,4,4,54,56,26,9,8,27,19,56,51,11,48,18,1,43,36,20,29#60,1,47,44,50,25,20,12,31,14,20,28,21,55,43,29,59,22,51,22,41,13,13,49,45,33}",
                1, 20) == 1;
    }

    private int test(String graphStr, int a, int b) {
        List<UndirectedGraphNode> graph = UndirectedGraphNode.parse(graphStr);
        return shortestPath(graph, findNode(graph, a), findNode(graph, b));
    }

    private UndirectedGraphNode findNode(List<UndirectedGraphNode> graph, int nodeValue) {
        for (UndirectedGraphNode graphNode : graph) {
            if (graphNode.label == nodeValue) {
                return graphNode;
            }
        }
        return null;
    }
}
